/*--------------ukrywanie danych - konwencja ----------------*/
class Cat {
    constructor(color) {
        this._color = color;
    }
    //metoda pobierająca zawartość color
    getColor() {
        return this._color
    }

    setColor(newColor) {
        if (typeof value === 'string') {
            return this._color = newColor;
        } else {
            console.log('wartość nieprawidłowa')
        } 
    }
}
const kotek = new Cat('czarny');

/*-------------closures-------------------------*/
/*
class Dog {
    constructor(name, dogColor) {
        this.name = name;
        let color = dogColor;
        this.getColor = () => color; //przekazywanie ukrytej wartości
        this.setColor = (value) => color = value; //zmiana
    }
}
const fafik = new Dog('fafik', 'brązowy');
*/

/*--------------closures inaczej napisane---------*/

class Dog {
    constructor(name, color) {
        this.name = name;
        let _color = color;
        this.getColor = () => color; //przekazywanie ukrytej wartości
        this.setColor = newColor => _color = newColor; //zmiana
    }
}
const fafik = new Dog('fafik', 'brązowy');

/*-------------closures przykład 2-------------------*/
class Car {
    constructor(name, counter = 100000, year = 2000) {
        this.name = name;
        let _counter = counter;
        let _year = year;
        let _changeNumber = 0;

        this.getYear = () => _year;
        this.setCounter = (value) => {
            _changeNumber++;
            return _counter = value;
        }
        this.getCounter = function() {
            if (_changeNumber) alert(`uważaj, licznik kręcony ${_changeNumber}`)
            return _counter;
        }

        this.showCarAge = function(year) {
            return year - _year;
        }
}}
const polonez = new Car('polonez caro', '25000', '2009');

